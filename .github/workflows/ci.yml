name: CI

on:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ubuntu-latest]
      fail-fast: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      PROJECT_NAME: Lynx

    steps:
    - uses: actions/checkout@v2

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1.8.1
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    - name: Build
      run: dotnet build -c Release

    - name: Run CI tests
      run: dotnet test -c Release --no-build --collect:"XPlat Code Coverage"

    - name: '[Ubuntu] Generate test coverage report'
      if: matrix.os == 'ubuntu-latest'
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.8
      with:
        reports: 'tests/**/*.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline_AzurePipelines_Dark;SonarQube'
        assemblyfilters: '+*'
        classfilters: '+*;-*Exception;-*ConstantGenerator;-*MagicNumberGenerator'
        filefilters: '+*'
        verbosity: 'Info'
        title: '${{ env.PROJECT_NAME }} #${{ github.run_number }} (${{ env.GITHUB_REF_SLUG }})'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
        customSettings: 'numberOfReportsParsedInParallel=3;numberOfReportsMergedInParallel=3'

    - name: '[Ubuntu] Upload test coverage report'
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-coverage-ci-${{ github.run_number }}
        path: coveragereport/
        if-no-files-found: error

  long-running-tests:
    needs: build

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ubuntu-latest]
      fail-fast: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1.8.1
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    - name: Build
      run: dotnet build -c Release

    - name: Run long-running tests
      run: dotnet test -c Release --no-build -v=normal --filter "TestCategory=LongRunning"
